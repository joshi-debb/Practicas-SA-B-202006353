pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = "us-central1-docker.pkg.dev/forward-fuze-456010-c2/sa-p7"
        K8S_NAMESPACE = "sa-p7"
        REGISTRY_URL = "https://us-central1-docker.pkg.dev"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Login to Artifact Registry') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gcp-access-token', variable: 'GCP_TOKEN_FILE')]) {
                        bat "gcloud auth activate-service-account --key-file=${GCP_TOKEN_FILE}"
                        bat "gcloud config set account sa-practicas@forward-fuze-456010-c2.iam.gserviceaccount.com"
                        bat "gcloud config set project forward-fuze-456010-c2"
                        bat "gcloud auth configure-docker us-central1-docker.pkg.dev"
                    }
                }
            }
        }

        stage('Build Images') {
            steps {
                script {
                    def services = ['equipos', 'mantenimiento', 'reportes', 'ubicaciones']
                    services.each { service ->
                        def servicePath = "./backend/services/${service}"
                        def dockerfilePath = "${servicePath}/Dockerfile"
                        def imageName = "${DOCKER_REGISTRY}/${service}:latest"
                        echo "Construyendo imagen para ${service}"
                        docker.build(imageName, "-f ${dockerfilePath} ${servicePath}")
                    }
                }
            }
        }

        stage('Test Images') {
            steps {
                script {
                    bat "docker run ${DOCKER_REGISTRY}/mantenimiento:latest npm test"
                    bat "docker run ${DOCKER_REGISTRY}/reportes:latest npm test"
                    bat "docker run ${DOCKER_REGISTRY}/equipos:latest python3 -m unittest discover"
                    bat "docker run ${DOCKER_REGISTRY}/ubicaciones:latest python3 -m unittest discover"
                }
            }
        }

        stage('Push Images'){
            steps {
                script {
                    def services = ['equipos', 'mantenimiento', 'reportes', 'ubicaciones']
                    services.each { service ->
                        bat "docker push ${DOCKER_REGISTRY}/${service}:latest"
                    }
                }
            }
        }

        stage('Deploy to KOPS cluster') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-kops', variable: 'KUBECONFIG')]) {
                    script {
                        def services = ['equipos', 'mantenimiento', 'reportes', 'ubicaciones']
                        services.each { service ->
                            def imageName = "${DOCKER_REGISTRY}/${service}:latest"
                            echo "Desplegando ${service} en KOPS Kubernetes"
                            bat "kubectl set image deployment/${service} ${service}=${imageName} --namespace=${K8S_NAMESPACE}"
                            bat "kubectl rollout status deployment/${service} --namespace=${K8S_NAMESPACE}"
                        }
                        
                        // bat "kubectl delete -f ./k8s/micro-servicios/. --namespace=${K8S_NAMESPACE} --ignore-not-found=true"
                        // bat "kubectl apply -f ./k8s/micro-servicios/. --namespace=${K8S_NAMESPACE}"

                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
